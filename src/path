#!/usr/bin/env python
#
# PATH command-line interface
# Copyright (c) 2003-04 Francis Rogers
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import sys
import os
import getopt
from pathlang import Path

def path_main():
    """Command line interpreter for the PATH programming language."""
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], "dhnp:", ["debug", "help", "noplugins", "plugindir"])
    except getopt.GetoptError:
        path_usage()
    verbose = False
    noplugins = False
    plugdir = ""
    for o, a in opts:
        if o in ("-d", "--debug"):
            verbose = True
        if o in ("-h", "--help"):
            path_usage()
        if o in ("-n", "--noplugins"):
            noplugins = True
        if o in ("-p", "--plugindir"):
            if plugdir == "":
                plugdir = a
            else:
                plugdir += "," + a
    if len(args) == 0:
        path_usage()
    for f in args:
        prog = Path()
        prog.load_prog_file(f)
        if noplugins != True:
            path_load_plugins(prog, plugdir)
        prog.verbose = verbose
        try:
            prog.run()
        except KeyboardInterrupt:
            sys.exit()

def path_load_plugins(prog, plugdir):
    """Load plugins from plugin directories."""
    plugindirs = ["/usr/lib/path", "~/.path"]
    
    if plugdir != "":
        plugindirs = []
        for plugindir in plugdir.split(","):
            if os.access(plugindir, os.F_OK):
                plugindirs.append(plugindir)
    for plugindir in plugindirs:
        if os.access(plugindir, os.F_OK):
            for plugin in os.listdir(plugindir):
                if plugin.endswith(".py") == True:
                    exec(compile(open(plugindir + "/" + plugin).read(), plugindir + "/" + plugin, 'exec'), {"glob_path" : prog})

def path_usage():
    """Usage info for the interpreter."""
    print("Usage: " + sys.argv[0] + " [options] [-p dir] file")
    print("")
    print("options:")
    print("  -d, --debug          print debug messages to stderr")
    print("  -h, --help           show this help message and exit")
    print("  -n, --noplugins      disable all plugins")
    print("  -p, --plugindir=DIR  load plugins from directory DIR instead")
    sys.exit()

if __name__ == "__main__":
    path_main()
